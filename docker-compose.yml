services:
  postgres_db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: modula
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d


  liquibase-migrations:
    image: liquibase/liquibase:4.18
    depends_on:
      - postgres_db
    networks:
      - backend
    command:
      - --hub-mode=off
      - --changelog-file=master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgres_db:5432/modula
      - --username=admin
      - --password=admin
#      - --defaultSchemaName=google_docs
      - update
    volumes:
      - ./migrations/changelog:/liquibase/changelog

  google-docs:
    build:
      args:
        - GITHUB_TOKEN=${GITHUB_TOKEN}
        - GITHUB_USER=${GITHUB_USER}
    container_name: google_module
    image: vuhtang/google-app
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SERVER_PORT: 8081
    networks:
      - backend
    ports:
      - "8081:8081"

#  cassandra:
#    image: cassandra:4.1
#    ports:
#      - "0.0.0.0:9042:9042"
#    environment:
#      - CASSANDRA_CLUSTER_NAME=processes
#      - CASSANDRA_AUTHENTICATOR=AllowAllAuthenticator
#      - CASSANDRA_AUTHORIZER=AllowAllAuthorizer
#    volumes:
#      - cassandra_data:/var/lib/cassandra
#    healthcheck:
#      test: [ "CMD-SHELL", "cqlsh -u cassandra -p cassandra -e 'describe keyspaces'" ]
#      interval: 10s
#      timeout: 10s
#      retries: 10
#    networks:
#      - brokers
#
#  init-cassandra:
#    image: cassandra:4.1
#    depends_on:
#      - cassandra
#    restart: "no"
#    entrypoint: [ "/init.sh" ]
#    volumes:
#      - ./cassandra/init.sh:/init.sh
#      - ./cassandra/init.cql:/docker-entrypoint-initdb.d/init.cql
#    networks:
#      - brokers

#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.0.0
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#    volumes:
#      - zookeeper_data:/var/lib/zookeeper/data
#    ports:
#      - "2181:2181"
#    networks:
#      - brokers
#
#  kafka:
#    image: confluentinc/cp-kafka:7.0.0
#    depends_on:
#      - zookeeper
#    ports:
#      - "9092:9092"
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
#    volumes:
#      - kafka_data:/var/lib/kafka/data
#    networks:
#      - brokers

#  core-builder:
#    build:
#      context: .
#      dockerfile: modula-core-builder/Dockerfile
#    container_name: core-builder
#    depends_on:
#      postgres_db:
#          condition: service_started
#      kafka:
#          condition: service_started
#    environment:
#      SPRING_DATASOURCE_URL: jdbc:postgresql://db:5432/core_builder
#      SPRING_DATASOURCE_USERNAME: your_username
#      SPRING_DATASOURCE_PASSWORD: your_password
#    ports:
#      - "8081:8080"
#    networks:
#      - brokers

#  core-processor:
#    build:
#      context: .
#      dockerfile: core-processor/Dockerfile
#    container_name: core-processor
#    depends_on:
#      init-cassandra:
#        condition: service_completed_successfully
#      kafka:
#        condition: service_started
#    ports:
#      - "8082:8080"

#  google-docs:
#    build:
#      context: .
#      dockerfile: modules/google/google-docs/Dockerfile
#    container_name: google-docs
#    ports:
#      - "8083:8080"
#    networks:
#      - brokers



#  gateway:
#    build:
#      context: .
#      dockerfile: gateway/Dockerfile
#    container_name: gateway
#    depends_on:
#      init-cassandra:
#        condition: service_completed_successfully
#      kafka:
#        condition: service_started
#    ports:
#      - "8084:8080"


volumes:
#  cassandra_data:
#  kafka_data:
#  zookeeper_data:
  postgres_data:

networks:
  brokers:
    driver: bridge
  backend: