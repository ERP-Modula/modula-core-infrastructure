version: "3.9"

services:
  postgres_db:
    image: postgres:13
    environment:
      POSTGRES_DB: modula
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    networks:
      - backend
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d


  liquibase-migrations:
    image: liquibase/liquibase:latest
    depends_on:
      - postgres_db
    networks:
      - backend
    command:
      - --changelog-file=changelog/master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgres_db:5432/modula
      - --username=admin
      - --password=admin
      - update
    volumes:
      - ./migrations/changelog:/liquibase/changelog

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - 22181:2181
    networks:
      - backend


  kafka:
    image: confluentinc/cp-kafka:7.3.0
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "29092:29092"
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - backend

  kafka-ui:
    image: provectuslabs/kafka-ui
    container_name: kafka-ui
    ports:
      - "8091:8080"
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - backend

  google-docs:
    build:
      args:
        - GITHUB_TOKEN=${GITHUB_TOKEN}
        - GITHUB_USER=${GITHUB_USER}
    image: vuhtang/google-app:latest
    depends_on:
      - postgres_db
      - liquibase-migrations
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://google-docs:8081/actuator/health" ]
      interval: 30s
      timeout: 10s
      retries: 3
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      KAFKA-BROKERS: kafka:29092
      SERVER_PORT: 8081
    networks:
      - backend
    ports:
      - "8081:8081"

  core-builder:
    image: filimonsha/modula-core-builder:latest
    build:
      args:
        - GITHUB_TOKEN=${GITHUB_TOKEN}
        - GITHUB_USER=${GITHUB_USER}
    container_name: core-builder
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SERVER_PORT: 8082
    networks:
      - brokers
      - backend
    ports:
      - "8082:8082"

  core-processor:
    image: filimonsha/core-processor:latest
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SERVER_PORT: 8080
      KAFKA-BROKERS: kafka:29092
      CORE_BUILDER_CLIENT_URL: http://core-builder:8082/
    networks:
      - backend
    ports:
      - target: 8080
        published: 8080




#  core-processor:
#    build:
#      context: .
#      dockerfile: core-processor/Dockerfile
#    container_name: core-processor
#    depends_on:
#      init-cassandra:
#        condition: service_completed_successfully
#      kafka:
#        condition: service_started
#    ports:
#      - "8082:8080"

#  google-docs:
#    build:
#      context: .
#      dockerfile: modules/google/google-docs/Dockerfile
#    container_name: google-docs
#    ports:
#      - "8083:8080"
#    networks:
#      - brokers



#  gateway:
#    build:
#      context: .
#      dockerfile: gateway/Dockerfile
#    container_name: gateway
#    depends_on:
#      init-cassandra:
#        condition: service_completed_successfully
#      kafka:
#        condition: service_started
#    ports:
#      - "8084:8080"


volumes:
  postgres_data:

networks:
  brokers:
    driver: bridge
  backend: