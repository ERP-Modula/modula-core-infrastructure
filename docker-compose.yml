version: "3.9"

services:
  postgres_db:
    image: postgres:13
    container_name: postgres_db
    environment:
      POSTGRES_DB: modula
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: admin
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U admin -d modula" ]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - backend
    ports:
      - target: 5432
        published: 5432
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./postgres_init:/docker-entrypoint-initdb.d
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager


  liquibase-migrations:
    image: liquibase/liquibase:latest
    depends_on:
      - postgres_db
    networks:
      - backend
    command:
      - --changelog-file=changelog/master.xml
      - --driver=org.postgresql.Driver
      - --url=jdbc:postgresql://postgres_db:5432/modula
      - --username=admin
      - --password=admin
      - update
    volumes:
      - ./migrations/changelog:/liquibase/changelog
    deploy:
      restart_policy:
        condition: on-failure
        delay: 5s
        max_attempts: 3
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  prometheus:
    image: prom/prometheus:latest
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - target: 9090
        published: 9090
    networks:
      - backend
    deploy:
      placement:
        constraints:
          - node.role == manager

  grafana:
    image: grafana/grafana:latest
    ports:
      - target: 3000
        published: 3000
        mode: ingress
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana-provisioning:/etc/grafana/provisioning
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  autoscaler:
    image: vuhtang/swarm-autoscaler:latest
    command: "/etc/docker-swarm-service-autoscaler/autoscaler.yml --log-leve=DEBUG"
    environment:
      - DOCKER_HOST=unix:///var/run/docker.sock
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: autoscaler.yml
        target: /etc/docker-swarm-service-autoscaler/autoscaler.yml
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - target: 22181
        published: 2181
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager


  kafka:
    image: confluentinc/cp-kafka:7.3.0
    depends_on:
      - zookeeper
    ports:
      - target: 29092
        published: 29092
      - target: 9092
        published: 9092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
    networks:
      - backend
    deploy:
      replicas: 1
      placement:
        constraints:
          - node.role == manager

  kafka-ui:
    image: provectuslabs/kafka-ui
    ports:
      - target: 8080
        published: 8091
    restart: always
    environment:
      - KAFKA_CLUSTERS_0_NAME=local
      - KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS=kafka:29092
      - KAFKA_CLUSTERS_0_ZOOKEEPER=zookeeper:2181
    networks:
      - backend
#    deploy:
#      replicas: 1
#      placement:
#        constraints:
#          - node.role == manager

  google-docs:
    image: vuhtang/google-app:latest
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      KAFKA-BROKERS: kafka:29092
      SERVER_PORT: 8081
      CORE_BUILDER_CLIENT_URL: http://core-builder:8082/
    networks:
      - backend
    ports:
      - target: 8081
        published: 8081
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3

  core-builder:
    image: vuhtang/core-builder:latest
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SERVER_PORT: 8082
    networks:
      - backend
    ports:
      - target: 8082
        published: 8082
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3



  core-processor:
    image: vuhtang/core-processor
    depends_on:
      - postgres_db
      - liquibase-migrations
    environment:
      SPRING_DATASOURCE_URL: jdbc:postgresql://postgres_db:5432/modula
      SPRING_DATASOURCE_USERNAME: admin
      SPRING_DATASOURCE_PASSWORD: admin
      SERVER_PORT: 8080
      KAFKA-BROKERS: kafka:29092
      CORE_BUILDER_CLIENT_URL: http://core-builder:8082/
    networks:
      - backend
    ports:
      - target: 8080
        published: 8080
    deploy:
      replicas: 1
      restart_policy:
        condition: on-failure
        delay: 10s
        max_attempts: 3


volumes:
  grafana-data:
    driver: local
  postgres_data:

networks:
  backend:
    driver: overlay

configs:
  autoscaler.yml:
    file: ./autoscaler.yml